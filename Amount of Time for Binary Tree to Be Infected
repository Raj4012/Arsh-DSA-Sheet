You are given the root of a binary tree with unique values, and an integer start. At minute 0, an infection starts from the node with value start.

Each minute, a node becomes infected if:

The node is currently uninfected.
The node is adjacent to an infected node.
Return the number of minutes needed for the entire tree to be infected.

Code starts from here;;;

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int amountOfTime(TreeNode root, int start) {
        Map<Integer, List<Integer>> graph = new HashMap<>();
        buildGraph(root, null, graph);
        return bfs(graph, start);
    }
    private void buildGraph(TreeNode node, TreeNode parent, Map<Integer, List<Integer>> graph){
        if(node == null) return;

        graph.putIfAbsent(node.val, new ArrayList<>());

        if(parent != null){
            graph.get(node.val).add(parent.val);
            graph.get(parent.val).add(node.val);
        }
        buildGraph(node.left, node, graph);
        buildGraph(node.right, node, graph);
    }
    private int bfs(Map<Integer, List<Integer>> graph, int start){
        Queue<Integer> queue = new LinkedList<>();
        Set<Integer> visited = new HashSet<>();
        queue.add(start);
        visited.add(start);

        int minutes = 0;

        while(!queue.isEmpty()){
            int size = queue.size();
            boolean madeProgress = false;

            for(int i=0; i < size; i++){
                int node = queue.poll();

                for(int neighbor : graph.get(node)){
                    if(!visited.contains(neighbor)){
                        visited.add(neighbor);
                        queue.add(neighbor);
                        madeProgress = true;
                    }
                }
            }
            if(madeProgress) minutes++;
        }
        return minutes;
    }
}
